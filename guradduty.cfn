{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "This CloudFormation Template can be used to quickly get started with AWS GuardDuty by configuring an environment to generate and remediate AWS GuardDuty findings.",
    "Parameters": {
        "ResourceName": {
            "Type": "String",
            "Default": "GuardDuty-Example",
            "AllowedValues": [
                "GuardDuty-Example"
            ],
            "Description": "Prefix for the resources that are created."
        },
        "EmailAddress": {
            "Description": "Email address for receiving alerts.",
            "Type": "String",
            "AllowedPattern": ".+"
        }
    },
    "Metadata": {},
    "Mappings": {
        "RegionMap": {
            "us-east-1": {
                "64": "ami-afd15ed0"
            },
            "us-east-2": {
                "64": "ami-2a0f324f"
            },
            "us-west-1": {
                "64": "ami-00d8c660"
            },
            "us-west-2": {
                "64": "ami-31394949"
            },
            "ap-south-1": {
                "64": "ami-7d95b612"
            },
            "ap-northeast-1": {
                "64": "ami-2724cf58"
            },
            "ap-northeast-2": {
                "64": "ami-d117bebf"
            },
            "ap-southeast-1": {
                "64": "ami-a7f0c4db"
            },
            "ap-southeast-2": {
                "64": "ami-c267b0a0"
            },
            "ca-central-1": {
                "64": "ami-c59818a1"
            },
            "eu-central-1": {
                "64": "ami-43eec3a8"
            },
            "eu-west-1": {
                "64": "ami-921423eb"
            },
            "eu-west-2": {
                "64": "ami-924aa8f5"
            },
            "eu-west-3": {
                "64": "ami-a88233d5"
            },
            "sa-east-1": {
                "64": "ami-4fd48923"
            }
        }
    },
    "Conditions": {},
    "Resources": {
        "GDThreatListBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "BucketName": {
                    "Fn::Join": [
                        "-",
                        [
                            "guardduty-example",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            {
                                "Ref": "AWS::Region"
                            }
                        ]
                    ]
                }
            }
        },
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": "10.0.0.0/24",
                "EnableDnsHostnames": true,
                "EnableDnsSupport": true,
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "ResourceName"
                        }
                    }
                ]
            }
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "ResourceName"
                        }
                    }
                ]
            }
        },
        "GatewayAttachment": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                },
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "RouteTable": {
            "DependsOn": [
                "VPC"
            ],
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "ResourceName"
                        }
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "PublicRoute": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                },
                "RouteTableId": {
                    "Ref": "RouteTable"
                }
            }
        },
        "Subnet": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "CidrBlock": "10.0.0.0/26",
                "MapPublicIpOnLaunch": true,
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "ResourceName"
                        }
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "SubnetAssoc": {
            "DependsOn": [
                "Subnet",
                "RouteTable"
            ],
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "RouteTable"
                },
                "SubnetId": {
                    "Ref": "Subnet"
                }
            }
        },
        "PublicNACL": {
            "Type": "AWS::EC2::NetworkAcl",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "ResourceName"
                        }
                    },
                    {
                        "Key": "Network",
                        "Value": "Public"
                    }
                ]
            }
        },
        "InboundPublicNACLEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "PublicNACL"
                },
                "RuleNumber": 100,
                "Protocol": -1,
                "RuleAction": "allow",
                "Egress": false,
                "CidrBlock": "0.0.0.0/0",
                "PortRange": {
                    "From": 0,
                    "To": 65535
                }
            }
        },
        "OutboundPublicNACLEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "PublicNACL"
                },
                "RuleNumber": 100,
                "Protocol": -1,
                "RuleAction": "allow",
                "Egress": true,
                "CidrBlock": "0.0.0.0/0",
                "PortRange": {
                    "From": 0,
                    "To": 65535
                }
            }
        },
        "SubnetNACLAssociation": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "Subnet"
                },
                "NetworkAclId": {
                    "Ref": "PublicNACL"
                }
            }
        },
        "TargetSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": {
                    "Ref": "ResourceName"
                },
                "VpcId": {
                    "Ref": "VPC"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "icmp",
                        "FromPort": "-1",
                        "ToPort": "-1",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "ForensicSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": {
                    "Fn::Join": [
                        "-",
                        [
                            {
                                "Ref": "ResourceName"
                            },
                            "Forensics"
                        ]
                    ]
                },
                "VpcId": {
                    "Ref": "VPC"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "icmp",
                        "FromPort": "-1",
                        "ToPort": "-1",
                        "CidrIp": "10.0.0.0/24"
                    }
                ],
                "SecurityGroupEgress": [
                    {
                        "IpProtocol": "icmp",
                        "FromPort": "-1",
                        "ToPort": "-1",
                        "CidrIp": "10.0.0.0/24"
                    }
                ]
            }
        },
        "CompromisedUser": {
            "Type": "AWS::IAM::User",
            "Properties": {
                "UserName": {
                    "Fn::Join": [
                        "-",
                        [
                            {
                                "Ref": "ResourceName"
                            },
                            "Compromised",
                            "Simulated"
                        ]
                    ]
                }
            }
        },
        "CompromisedUserKey": {
            "Type": "AWS::IAM::AccessKey",
            "Properties": {
                "UserName": {
                    "Ref": "CompromisedUser"
                }
            }
        },
        "CompromisedUserPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "CompromisedUserPolicy",
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "ssm:GetParameter",
                                "ssm:GetParameters",
                                "ssm:DescribeParameters"
                            ],
                            "Resource": {
                                "Fn::Join": [
                                    ":",
                                    [
                                        "arn:aws:ssm",
                                        {
                                            "Ref": "AWS::Region"
                                        },
                                        {
                                            "Ref": "AWS::AccountId"
                                        },
                                        "*"
                                    ]
                                ]
                            }
                        }
                    ]
                },
                "Users": [
                    {
                        "Ref": "CompromisedUser"
                    }
                ]
            }
        },
        "MaliciousIP": {
            "DependsOn": [
                "GatewayAttachment"
            ],
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "InstanceId": {
                    "Ref": "MaliciousInstance"
                },
                "Domain": "vpc"
            }
        },
        "MaliciousInstance": {
            "DependsOn": [
                "GDThreatListBucket"
            ],
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "InstanceType": "t3.micro",
                "ImageId": {
                    "Fn::FindInMap": [
                        "RegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "64"
                    ]
                },
                "NetworkInterfaces": [
                    {
                        "AssociatePublicIpAddress": "false",
                        "DeviceIndex": "0",
                        "GroupSet": [
                            {
                                "Ref": "TargetSecurityGroup"
                            }
                        ],
                        "SubnetId": {
                            "Ref": "Subnet"
                        }
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                ": ",
                                [
                                    {
                                        "Ref": "ResourceName"
                                    },
                                    "Malicious Instance",
                                    "Scenario 1 & 2"
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "GD-Finding",
                        "Value": "UnauthorizedAccess:EC2/MaliciousIPCaller.Custom"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Sub": [
                            "#!/bin/bash -ex\n\n# Create Creds and Config files\nmkdir /home/ec2-user/.aws\ntouch /home/ec2-user/.aws/credentials\ntouch /home/ec2-user/.aws/config\n\ncat <<EOT >> /home/ec2-user/.aws/credentials\n[default]\naws_access_key_id = ${AccessKey}\naws_secret_access_key = ${SecretKey}\nEOT\n\n# Modify Permissions and Ownership\nchmod 746 /home/ec2-user/.aws/credentials\nchown ec2-user /home/ec2-user/.aws/credentials\nchmod 746 /home/ec2-user/.aws/config\nchown ec2-user /home/ec2-user/.aws/config\n\ncat <<EOT >> /home/ec2-user/gd-findings.sh\n#!/bin/bash\naws configure set default.region ${Region}\naws iam get-user\naws iam create-user --user-name Sarah\naws dynamodb list-tables\naws s3api list-buckets\naws ssm describe-parameters\naws ssm get-parameters --names \"gd_prod_dbpwd_sample\"\nEOT\n\nchmod 744 /home/ec2-user/gd-findings.sh\nchown ec2-user /home/ec2-user/gd-findings.sh\n\necho \"* * * * * /home/ec2-user/gd-findings.sh > /home/ec2-user/gd-findings.log 2>&1\" | tee -a /var/spool/cron/ec2-user\n",
                            {
                                "Region": {
                                    "Ref": "AWS::Region"
                                },
                                "AccessKey": {
                                    "Ref": "CompromisedUserKey"
                                },
                                "SecretKey": {
                                    "Fn::GetAtt": [
                                        "CompromisedUserKey",
                                        "SecretAccessKey"
                                    ]
                                }
                            }
                        ]
                    }
                }
            }
        },
        "CompromisedInstance": {
            "Type": "AWS::EC2::Instance",
            "DependsOn": "MaliciousIP",
            "Properties": {
                "InstanceType": "t3.micro",
                "ImageId": {
                    "Fn::FindInMap": [
                        "RegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "64"
                    ]
                },
                "NetworkInterfaces": [
                    {
                        "AssociatePublicIpAddress": "true",
                        "DeviceIndex": "0",
                        "GroupSet": [
                            {
                                "Ref": "TargetSecurityGroup"
                            }
                        ],
                        "SubnetId": {
                            "Ref": "Subnet"
                        }
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                ": ",
                                [
                                    {
                                        "Ref": "ResourceName"
                                    },
                                    "Compromised Instance",
                                    "Scenario 1"
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "GD-Finding",
                        "Value": "UnauthorizedAccess:EC2/MaliciousIPCaller.Custom"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Sub": "#!/bin/bash -ex\nexec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1\necho BEGIN\necho \"* * * * * ping -c 6 -i 10 ${MaliciousIP}\" | tee -a /var/spool/cron/ec2-user\n"
                    }
                }
            }
        },
        "CompromisedRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": {
                    "Fn::Join": [
                        "-",
                        [
                            {
                                "Ref": "ResourceName"
                            },
                            "EC2",
                            "Compromised"
                        ]
                    ]
                },
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
                ],
                "Policies": [
                    {
                        "PolicyName": "GuardDutyCompromisedPolicy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ssm:PutParameter",
                                        "ssm:DescribeParameters",
                                        "ssm:GetParameters",
                                        "ssm:DeleteParameter"
                                    ],
                                    "Resource": {
                                        "Fn::Join": [
                                            ":",
                                            [
                                                "arn:aws:ssm",
                                                {
                                                    "Ref": "AWS::Region"
                                                },
                                                {
                                                    "Ref": "AWS::AccountId"
                                                },
                                                "parameter/*"
                                            ]
                                        ]
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ssm:DescribeParameters"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "dynamodb:*"
                                    ],
                                    "Resource": {
                                        "Fn::GetAtt": [
                                            "CustDynamoDBTable",
                                            "Arn"
                                        ]
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "dynamodb:ListTables",
                                        "dynamodb:DescribeTable"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "guardduty:GetDetector",
                                        "guardduty:ListDetectors",
                                        "guardduty:CreateThreatIntelSet",
                                        "guardduty:UpdateThreatIntelSet"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": "s3:PutObject",
                                    "Resource": {
                                        "Fn::Sub": "arn:aws:s3:::${GDThreatListBucket}/*"
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:PutRolePolicy"
                                    ],
                                    "Resource": {
                                        "Fn::Join": [
                                            ":",
                                            [
                                                "arn:aws:iam:",
                                                {
                                                    "Ref": "AWS::AccountId"
                                                },
                                                "role/aws-service-role/guardduty.amazonaws.com/*"
                                            ]
                                        ]
                                    }
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "CompromisedInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "InstanceProfileName": {
                    "Fn::Join": [
                        "-",
                        [
                            {
                                "Ref": "ResourceName"
                            },
                            "Compromised",
                            "Profile"
                        ]
                    ]
                },
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "CompromisedRole"
                    }
                ]
            }
        },
        "DBPWDParameter": {
            "Type": "AWS::SSM::Parameter",
            "Properties": {
                "Name": "gd_prod_dbpwd_sample",
                "Type": "StringList",
                "Value": "NA",
                "Description": "Sample secret for generating GuardDuty findings."
            }
        },
        "CompromisedInstance2": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "InstanceType": "t3.micro",
                "IamInstanceProfile": {
                    "Ref": "CompromisedInstanceProfile"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "RegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "64"
                    ]
                },
                "NetworkInterfaces": [
                    {
                        "AssociatePublicIpAddress": true,
                        "DeviceIndex": 0,
                        "GroupSet": [
                            {
                                "Ref": "TargetSecurityGroup"
                            }
                        ],
                        "SubnetId": {
                            "Ref": "Subnet"
                        }
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                ": ",
                                [
                                    {
                                        "Ref": "ResourceName"
                                    },
                                    "Compromised Instance",
                                    "Scenario 3"
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "GD-Finding",
                        "Value": "UnauthorizedAccess:IAMUser/InstanceCredentialExfiltration"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Sub": [
                            "#!/bin/bash\n\n# Start SSM Agent\nsudo yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm\n\n# Set Variables\naws configure set default.region ${Region}\nuuid=$(uuidgen)\nlist=\"gd-threat-list-example-$uuid.txt\"\nmaliciousip=`curl http://169.254.169.254/latest/meta-data/public-ipv4`\n\n# Create Threatlist\necho ${IP} >> $list\n\n# Upload list to S3\naws s3 cp $list s3://${Bucket}/$list\nsleep 5\n\n# Create GuardDuty Threat List\nid=`aws guardduty list-detectors --query 'DetectorIds[0]' --output text`\naws guardduty create-threat-intel-set --activate --detector-id $id --format TXT --location https://s3.amazonaws.com/${Bucket}/$list --name Example-Threat-List\n\n# Set Parameters in SSM\naws ssm put-parameter --name 'gd_prod_dbpwd_sample' --type \"SecureString\" --value 'Password123' --overwrite\n\n# Add Item to Customer DB\naws dynamodb put-item --table-name ${DB} --item '{ \"name\": { \"S\": \"Joshua Tree\" }, \"state\": {\"S\": \"California\"}, \"website\":{\"S\": \"https://www.nps.gov/jotr/index.htm\"} }'\n",
                            {
                                "Profile": {
                                    "Ref": "CompromisedInstanceProfile"
                                },
                                "Region": {
                                    "Ref": "AWS::Region"
                                },
                                "DB": {
                                    "Ref": "CustDynamoDBTable"
                                },
                                "Bucket": {
                                    "Ref": "GDThreatListBucket"
                                },
                                "IP": {
                                    "Ref": "MaliciousIP"
                                }
                            }
                        ]
                    }
                }
            }
        },
        "CustDynamoDBTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
                "AttributeDefinitions": [
                    {
                        "AttributeName": "name",
                        "AttributeType": "S"
                    }
                ],
                "KeySchema": [
                    {
                        "AttributeName": "name",
                        "KeyType": "HASH"
                    }
                ],
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": "5",
                    "WriteCapacityUnits": "5"
                },
                "TableName": "GuardDuty-Example-Customer-DB"
            }
        },
        "RemediationLambdaICERole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": {
                    "Fn::Join": [
                        "-",
                        [
                            {
                                "Ref": "ResourceName"
                            },
                            "Lambda",
                            "InstanceCredentialExfiltration"
                        ]
                    ]
                },
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "ResourceName"
                                    },
                                    "InstanceCredentialExfiltration"
                                ]
                            ]
                        },
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ssm:DescribeParameters"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ssm:GetParameter",
                                        "ssm:GetParameters"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:ReplaceIamInstanceProfileAssociation"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:DescribeIamInstanceProfileAssociations"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:CreateInstanceProfile"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:AddRoleToInstanceProfile",
                                        "iam:RemoveRoleFromInstanceProfile",
                                        "iam:ListInstanceProfilesForRole"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:DeleteInstanceProfile"
                                    ],
                                    "Resource": {
                                        "Fn::GetAtt": [
                                            "CompromisedInstanceProfile",
                                            "Arn"
                                        ]
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:PassRole"
                                    ],
                                    "Resource": {
                                        "Fn::GetAtt": [
                                            "CompromisedRole",
                                            "Arn"
                                        ]
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "iam:PutRolePolicy"
                                    ],
                                    "Resource": {
                                        "Fn::GetAtt": [
                                            "CompromisedRole",
                                            "Arn"
                                        ]
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "sns:Publish"
                                    ],
                                    "Resource": {
                                        "Ref": "GuardDutySNSTopic"
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "RemediationLambdaICE": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "FunctionName": {
                    "Fn::Join": [
                        "-",
                        [
                            {
                                "Ref": "ResourceName"
                            },
                            "Remediation",
                            "InstanceCredentialExfiltration"
                        ]
                    ]
                },
                "Handler": "index.handler",
                "Environment": {
                    "Variables": {
                        "TOPIC_ARN": {
                            "Ref": "GuardDutySNSTopic"
                        }
                    }
                },
                "Role": {
                    "Fn::GetAtt": [
                        "RemediationLambdaICERole",
                        "Arn"
                    ]
                },
                "Code": {
                    "ZipFile": "from __future__ import print_function\nfrom botocore.exceptions import ClientError\nimport json\nimport datetime\nimport boto3\nimport os\n\ndef handler(event, context):\n\n  # Log out event\n  print(\"log -- Event: %s \" % json.dumps(event))\n\n  # Create generic function response\n  response = \"Error auto-remediating the finding.\"\n\n  try:\n\n    # Set Clients\n    iam = boto3.client('iam')\n    ec2 = boto3.client('ec2')\n\n    # Set Role Variable\n    role = event['detail']['resource']['accessKeyDetails']['userName']\n\n    # Current Time\n    time = datetime.datetime.utcnow().isoformat()\n\n    # Set Revoke Policy\n    policy = \"\"\"\n      {\n        \"Version\": \"2012-10-17\",\n        \"Statement\": {\n          \"Effect\": \"Deny\",\n          \"Action\": \"*\",\n          \"Resource\": \"*\",\n          \"Condition\": {\"DateLessThan\": {\"aws:TokenIssueTime\": \"%s\"}}\n        }\n      }\n    \"\"\" % time\n\n    # Add policy to Role to Revoke all Current Sessions\n    iam.put_role_policy(\n      RoleName=role,\n      PolicyName='RevokeOldSessions',\n      PolicyDocument=policy.replace('\\n', '').replace(' ', '')\n    )\n\n    # Send Response Email\n    response = \"GuardDuty Remediation | ID:%s: GuardDuty discovered EC2 IAM credentials (Role: %s) being used outside of the EC2 service.  All sessions have been revoked.  Please follow up with any additional remediation actions.\" % (event['detail']['id'], role)\n    sns = boto3.client('sns')\n    sns.publish(\n      TopicArn=os.environ['TOPIC_ARN'],\n      Message=response\n    )\n  except ClientError as e:\n    print(e)\n\n  print(\"log -- Response: %s \" % response)\n  return response\n"
                },
                "Runtime": "python2.7",
                "Timeout": "35"
            }
        },
        "RemediationLambdaICEInvokePermissions": {
            "DependsOn": [
                "RemediationLambdaICE"
            ],
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Ref": "RemediationLambdaICE"
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "events.amazonaws.com"
            }
        },
        "RemediationLambdaEC2Role": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": {
                    "Fn::Join": [
                        "-",
                        [
                            {
                                "Ref": "ResourceName"
                            },
                            "Lambda",
                            "EC2MaliciousIPCaller"
                        ]
                    ]
                },
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "ResourceName"
                                    },
                                    "EC2MaliciousIPCaller"
                                ]
                            ]
                        },
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ssm:PutParameter",
                                        "ec2:AuthorizeSecurityGroupEgress",
                                        "ec2:AuthorizeSecurityGroupIngress",
                                        "ec2:CreateSecurityGroup",
                                        "ec2:DescribeSecurityGroups",
                                        "ec2:RevokeSecurityGroupEgress",
                                        "ec2:RevokeSecurityGroupIngress",
                                        "ec2:UpdateSecurityGroupRuleDescriptionsEgress",
                                        "ec2:UpdateSecurityGroupRuleDescriptionsIngress",
                                        "ec2:DescribeInstances",
                                        "ec2:UpdateSecurityGroupRuleDescriptionsIngress",
                                        "ec2:DescribeVpcs",
                                        "ec2:ModifyInstanceAttribute",
                                        "lambda:InvokeFunction",
                                        "cloudwatch:PutMetricData",
                                        "xray:PutTraceSegments",
                                        "xray:PutTelemetryRecords"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:*"
                                    ],
                                    "Resource": "arn:aws:logs:*:*:*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "sns:Publish"
                                    ],
                                    "Resource": {
                                        "Ref": "GuardDutySNSTopic"
                                    }
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "RemediationLambdaEC2": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "FunctionName": {
                    "Fn::Join": [
                        "-",
                        [
                            {
                                "Ref": "ResourceName"
                            },
                            "Remediation",
                            "EC2MaliciousIPCaller"
                        ]
                    ]
                },
                "Handler": "index.handler",
                "Environment": {
                    "Variables": {
                        "TOPIC_ARN": {
                            "Ref": "GuardDutySNSTopic"
                        },
                        "FORENSICS_SG": {
                            "Ref": "ForensicSecurityGroup"
                        },
                        "INSTANCE_ID": {
                            "Ref": "CompromisedInstance"
                        }
                    }
                },
                "Role": {
                    "Fn::GetAtt": [
                        "RemediationLambdaEC2Role",
                        "Arn"
                    ]
                },
                "Code": {
                    "ZipFile": "from __future__ import print_function\nfrom botocore.exceptions import ClientError\nimport boto3\nimport json\nimport os\n\ndef handler(event, context):\n\n  # Log out event\n  print(\"log -- Event: %s \" % json.dumps(event))\n\n  # Create generic function response\n  response = \"Error auto-remediating the finding.\"\n\n  try:\n    ec2 = boto3.client('ec2')\n\n    # Set Variables\n    vpc_id = event[\"detail\"][\"resource\"][\"instanceDetails\"][\"networkInterfaces\"][0][\"vpcId\"]\n    instanceID = event[\"detail\"][\"resource\"][\"instanceDetails\"][\"instanceId\"]\n    security_group_id = os.environ['FORENSICS_SG']\n\n    if instanceID == os.environ['INSTANCE_ID']:\n\n      print(\"log -- Security Group Created %s in vpc %s.\" % (security_group_id, vpc_id))\n\n      # Isolate Instance\n      ec2 = boto3.resource('ec2')\n      instance = ec2.Instance(instanceID)\n      print(\"log -- %s, %s\" % (instance.id, instance.instance_type))\n      instance.modify_attribute(Groups=[security_group_id])\n\n      # Send Response Email\n      response = \"GuardDuty Remediation | ID:%s: GuardDuty discovered an EC2 instance (Instance ID: %s) that is communicating outbound with an IP Address on a threat list that you uploaded.  All security groups have been removed and it has been isolated. Please follow up with any additional remediation actions.\" % (event['detail']['id'], event['detail']['resource']['instanceDetails']['instanceId'])\n      sns = boto3.client('sns')\n      sns.publish(\n        TopicArn=os.environ['TOPIC_ARN'],\n        Message=response\n      )\n      print(\"log -- Response: %s \" % response)\n    else:\n      print(\"log -- Instance unrelated to GuardDuty-Hands-On environment.\")\n\n  except ClientError as e:\n    print(e)\n\n  print(\"log -- Response: %s \" % response)\n  return response\n"
                },
                "Runtime": "python2.7",
                "Timeout": "35"
            }
        },
        "RemediationLambdaEC2InvokePermissions": {
            "DependsOn": [
                "RemediationLambdaEC2"
            ],
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Ref": "RemediationLambdaEC2"
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "events.amazonaws.com"
            }
        },
        "GuardDutySNSTopic": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
                "TopicName": {
                    "Ref": "ResourceName"
                },
                "Subscription": [
                    {
                        "Endpoint": {
                            "Ref": "EmailAddress"
                        },
                        "Protocol": "email"
                    }
                ]
            }
        },
        "GuardDutySNSTopicPolicy": {
            "Type": "AWS::SNS::TopicPolicy",
            "Properties": {
                "PolicyDocument": {
                    "Id": "ID-GD-Topic-Policy",
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Sid": "SID-GD-Example",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "events.amazonaws.com"
                            },
                            "Action": "sns:Publish",
                            "Resource": {
                                "Ref": "GuardDutySNSTopic"
                            }
                        }
                    ]
                },
                "Topics": [
                    {
                        "Ref": "GuardDutySNSTopic"
                    }
                ]
            }
        },
        "GuardDutyEvent": {
            "Type": "AWS::Events::Rule",
            "Properties": {
                "Name": "GuardDuty-Event-EC2-MaliciousIPCaller",
                "Description": "GuardDuty Event: UnauthorizedAccess:EC2/MaliciousIPCaller.Custom",
                "EventPattern": {
                    "source": [
                        "aws.guardduty"
                    ],
                    "detail": {
                        "type": [
                            "UnauthorizedAccess:EC2/MaliciousIPCaller.Custom"
                        ]
                    }
                },
                "State": "ENABLED",
                "Targets": [
                    {
                        "Arn": {
                            "Fn::GetAtt": [
                                "RemediationLambdaEC2",
                                "Arn"
                            ]
                        },
                        "Id": "GuardDutyEvent-Lambda-Trigger"
                    },
                    {
                        "Arn": {
                            "Ref": "GuardDutySNSTopic"
                        },
                        "Id": "GuardDutySNSTopic-EC2-ThreatList",
                        "InputTransformer": {
                            "InputTemplate": "\"GuardDuty Finding | ID:<gdid>: The EC2 instance <instanceid> may be compromised and should be investigated. Go to https://console.aws.amazon.com/guardduty\"",
                            "InputPathsMap": {
                                "instanceid": "$.detail.resource.instanceDetails.instanceId",
                                "gdid": "$.detail.id"
                            }
                        }
                    }
                ]
            }
        },
        "GuardDutyEventIAM": {
            "Type": "AWS::Events::Rule",
            "Properties": {
                "Name": "GuardDuty-Event-IAMUser-InstanceCredentialExfiltration",
                "Description": "GuardDuty Event: UnauthorizedAccess:IAMUser/InstanceCredentialExfiltration",
                "EventPattern": {
                    "source": [
                        "aws.guardduty"
                    ],
                    "detail": {
                        "type": [
                            "UnauthorizedAccess:IAMUser/InstanceCredentialExfiltration"
                        ]
                    }
                },
                "State": "ENABLED",
                "Targets": [
                    {
                        "Arn": {
                            "Fn::GetAtt": [
                                "RemediationLambdaICE",
                                "Arn"
                            ]
                        },
                        "Id": "GuardDutyEvent-Lambda-Trigger"
                    },
                    {
                        "Arn": {
                            "Ref": "GuardDutySNSTopic"
                        },
                        "Id": "GuardDutySNSTopic-EC2-IAM",
                        "InputTransformer": {
                            "InputTemplate": "\"GuardDuty Finding | ID:<gdid>: An EC2 instance IAM credentials (Role: <userName>) may be compromised and should be investigated. Go to https://console.aws.amazon.com/guardduty\"",
                            "InputPathsMap": {
                                "userName": "$.detail.resource.accessKeyDetails.userName",
                                "gdid": "$.detail.id"
                            }
                        }
                    }
                ]
            }
        },
        "GuardDutyEventIAM2": {
            "Type": "AWS::Events::Rule",
            "Properties": {
                "Name": "GuardDuty-Event-IAMUser-MaliciousIPCaller",
                "Description": "GuardDuty Event: UnauthorizedAccess:IAMUser/MaliciousIPCaller.Custom",
                "EventPattern": {
                    "source": [
                        "aws.guardduty"
                    ],
                    "detail": {
                        "type": [
                            "UnauthorizedAccess:IAMUser/MaliciousIPCaller.Custom"
                        ]
                    }
                },
                "State": "ENABLED",
                "Targets": [
                    {
                        "Arn": {
                            "Ref": "GuardDutySNSTopic"
                        },
                        "Id": "GuardDutySNSTopic-IAM-ThreatList",
                        "InputTransformer": {
                            "InputTemplate": "\"GuardDuty Finding | ID:<gdid>: An AWS API operation was invoked (userName: <userName>) from an IP address that is included on your threat list and should be investigated. Go to https://console.aws.amazon.com/guardduty\"",
                            "InputPathsMap": {
                                "userName": "$.detail.resource.accessKeyDetails.userName",
                                "gdid": "$.detail.id"
                            }
                        }
                    }
                ]
            }
        }
    },
    "Outputs": {}
}
